const SMALL_CASE_ALPHABETS = 'qwertyuiopasdfghjklzxcvbnm';
const BIG_CASE_ALPHABETS = 'QWERTYUIOPASDFGHJKLZXCVBNM';
const NUMBERS = '1234567890';
const SYMBOLS = '`~!@#$%^&*()_+-=[]\ {}|;:",./<>?\'';

function clearScreen() {
  console.clear();
}

function getChoice() {
  const message = "This is a Enigma Machine. You can either decrypt or encrypt a script based on the KEY.\nSelect an option : \n\n 1. Encrypt\n 2. Decrypt";
  const selectedChoice = +prompt(message);

  clearScreen();

  if (selectedChoice === 1) {
    return 'encrypt';
  }

  if (selectedChoice === 2) {
    return 'decrypt';
  }
  console.log('Select a Valid option..ðŸ™‚');

  return getChoice();
}

function areSameCharsFound(character, key, index) {
  for (let currentIndex = index; currentIndex < key.length; currentIndex += 2) {
    if (character === key[currentIndex]) {
      return true;
    }
  }

  return false;
}

function isCharacterEncrypted(character, key) {
  for (let index = 0; index < key.length; index += 2) {
    if (character === key[index])
      return true;
  }

  return false;
}

function getRandomNumBetween(to, from) {
  return from + Math.ceil(Math.random() * (to - from));
}

function getRandomCharFromString(string) {
  return string[getRandomNumBetween(0, string.length - 1)];
}

function getRandomChar() {
  const randomNumberForChar = getRandomNumBetween(0, 4);

  switch (randomNumberForChar) {
    case 1:
      return getRandomCharFromString(SMALL_CASE_ALPHABETS);
    case 2:
      return getRandomCharFromString(BIG_CASE_ALPHABETS);
    case 3:
      return getRandomCharFromString(NUMBERS);
  }

  return getRandomCharFromString(SYMBOLS);
}

function isEncryptedCharUsed(character, key) {
  for (let index = 1; index < key.length; index += 2) {
    if (character === key[index]) {
      return true;
    }
  }

  return false;
}

function getEncryptedCharacter(character, key) {
  const randomChar = getRandomChar();

  if (isEncryptedCharUsed(randomChar, key)) {
    return getEncryptedCharacter(character, key);
  }

  return randomChar;
}

function getKeyFromComputer(text) {
  let key = '';

  for (const character of text) {
    if (!isCharacterEncrypted(character, key)) {
      key += character + getEncryptedCharacter(character, key);
    }
  }
  console.log("\n\nThe KEY generated by Computer :", key);

  return key;
}

function replace(character, key) {
  for (let index = 0; index < key.length; index += 2) {
    if (character === key[index]) {
      return key[index + 1];
    }
  }

  return character;
}

function convertText(key, text) {
  let convertedText = '';

  for (const character of text) {
    convertedText += replace(character, key);
  }

  return convertedText;
}

function isKeyValid(key) {
  if (key === '') {
    console.log("Indvalid KEY..ðŸ™‚");

    return false;
  }

  for (let index = 1; index < key.length; index += 2) {
    if (areSameCharsFound(key[index], key, index + 2)) {
      console.log("Indvalid KEY..ðŸ™‚");

      return false;
    }
  }

  return true;
}

function getKeyFromUser(text) {
  const key = prompt("\nEnter / Paste the KEY here :");

  if (!isKeyValid(key)) {
    return getKeyFromUser(text);
  }

  return key;
}

function getKeyToEncrypt(text) {
  const keyChoice = +prompt('\n\nSelect an option for the KEY : \n\n 1.User had a KEY\n 2.Let Computer generate a KEY');

  if (keyChoice !== 1 && keyChoice !== 2) {
    clearScreen();

    console.log('Enter a Valid option..ðŸ™‚ ');

    return getKeyToEncrypt(text);
  }

  const key = keyChoice === 1 ? getKeyFromUser(text) : getKeyFromComputer(text);

  return key;
}

function reverse(index, string) {
  if (index === string.length - 1) {
    return string[index];
  }

  return reverse(index + 1, string) + string[index];
}

function getKey(text, processType) {
  if (processType === 'encrypt') {
    return getKeyToEncrypt(text);
  }

  if (processType === 'decrypt') {
    return reverse(0, getKeyFromUser(text));
  }
}

function process(processType) {
  const text = prompt('Enter / Paste text here that you want to ' + processType + ' :');

  if (text === '') {
    clearScreen();
    console.log('ANYTHING is better than NOTHING. Please enter any text..ðŸ™‚ \n');

    return process(processType);
  }

  const KEY = getKey(text, processType);
  const convertedText = convertText(KEY, text);

  console.log("\nThe " + processType + "ed text :", convertedText, "\n\n\n\n");

  return convertedText;
}

function cryptographicTransform() {
  clearScreen();

  return process(getChoice());
}

cryptographicTransform();
